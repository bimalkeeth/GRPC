// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SalaryService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OBSalaries.SalaryService {

  /// <summary>Holder for reflection information generated from SalaryService.proto</summary>
  public static partial class SalaryServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for SalaryService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SalaryServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNTYWxhcnlTZXJ2aWNlLnByb3RvEgpPQlNhbGFyaWVzIoUBChFTYWxhcnlT",
            "bGlwUmVxdWVzdBIKCgJJZBgBIAEoBBIRCglGaXJzdE5hbWUYAiABKAkSEAoI",
            "TGFzdE5hbWUYAyABKAkSEgoKQmFzZVNhbGFyeRgEIAEoARIRCglTdXBlclJh",
            "dGUYBSABKAESGAoQUGF5bWVudFN0YXJ0RGF0ZRgGIAEoCSKLAQoSU2FsYXJ5",
            "U2xpcFJlc3BvbnNlEgoKAklkGAEgASgEEgwKBE5hbWUYAiABKAkSEQoJUGF5",
            "UGVyaW9kGAMgASgJEhMKC0dyb3NzSW5jb21lGAQgASgBEhEKCUluY29tZVRh",
            "eBgFIAEoARIRCglOZXRJbmNvbWUYBiABKAESDQoFU3VwZXIYByABKAEyYwoN",
            "U2FsYXJ5U2VydmljZRJSCg1Qcm9jZXNzU2FsYXJ5Eh0uT0JTYWxhcmllcy5T",
            "YWxhcnlTbGlwUmVxdWVzdBoeLk9CU2FsYXJpZXMuU2FsYXJ5U2xpcFJlc3Bv",
            "bnNlKAEwAUIbqgIYT0JTYWxhcmllcy5TYWxhcnlTZXJ2aWNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OBSalaries.SalaryService.SalarySlipRequest), global::OBSalaries.SalaryService.SalarySlipRequest.Parser, new[]{ "Id", "FirstName", "LastName", "BaseSalary", "SuperRate", "PaymentStartDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OBSalaries.SalaryService.SalarySlipResponse), global::OBSalaries.SalaryService.SalarySlipResponse.Parser, new[]{ "Id", "Name", "PayPeriod", "GrossIncome", "IncomeTax", "NetIncome", "Super" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SalarySlipRequest : pb::IMessage<SalarySlipRequest> {
    private static readonly pb::MessageParser<SalarySlipRequest> _parser = new pb::MessageParser<SalarySlipRequest>(() => new SalarySlipRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SalarySlipRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OBSalaries.SalaryService.SalaryServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SalarySlipRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SalarySlipRequest(SalarySlipRequest other) : this() {
      id_ = other.id_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      baseSalary_ = other.baseSalary_;
      superRate_ = other.superRate_;
      paymentStartDate_ = other.paymentStartDate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SalarySlipRequest Clone() {
      return new SalarySlipRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "FirstName" field.</summary>
    public const int FirstNameFieldNumber = 2;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastName" field.</summary>
    public const int LastNameFieldNumber = 3;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BaseSalary" field.</summary>
    public const int BaseSalaryFieldNumber = 4;
    private double baseSalary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BaseSalary {
      get { return baseSalary_; }
      set {
        baseSalary_ = value;
      }
    }

    /// <summary>Field number for the "SuperRate" field.</summary>
    public const int SuperRateFieldNumber = 5;
    private double superRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SuperRate {
      get { return superRate_; }
      set {
        superRate_ = value;
      }
    }

    /// <summary>Field number for the "PaymentStartDate" field.</summary>
    public const int PaymentStartDateFieldNumber = 6;
    private string paymentStartDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentStartDate {
      get { return paymentStartDate_; }
      set {
        paymentStartDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SalarySlipRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SalarySlipRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (BaseSalary != other.BaseSalary) return false;
      if (SuperRate != other.SuperRate) return false;
      if (PaymentStartDate != other.PaymentStartDate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (BaseSalary != 0D) hash ^= BaseSalary.GetHashCode();
      if (SuperRate != 0D) hash ^= SuperRate.GetHashCode();
      if (PaymentStartDate.Length != 0) hash ^= PaymentStartDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LastName);
      }
      if (BaseSalary != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(BaseSalary);
      }
      if (SuperRate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SuperRate);
      }
      if (PaymentStartDate.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaymentStartDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (BaseSalary != 0D) {
        size += 1 + 8;
      }
      if (SuperRate != 0D) {
        size += 1 + 8;
      }
      if (PaymentStartDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentStartDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SalarySlipRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.BaseSalary != 0D) {
        BaseSalary = other.BaseSalary;
      }
      if (other.SuperRate != 0D) {
        SuperRate = other.SuperRate;
      }
      if (other.PaymentStartDate.Length != 0) {
        PaymentStartDate = other.PaymentStartDate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            FirstName = input.ReadString();
            break;
          }
          case 26: {
            LastName = input.ReadString();
            break;
          }
          case 33: {
            BaseSalary = input.ReadDouble();
            break;
          }
          case 41: {
            SuperRate = input.ReadDouble();
            break;
          }
          case 50: {
            PaymentStartDate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SalarySlipResponse : pb::IMessage<SalarySlipResponse> {
    private static readonly pb::MessageParser<SalarySlipResponse> _parser = new pb::MessageParser<SalarySlipResponse>(() => new SalarySlipResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SalarySlipResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OBSalaries.SalaryService.SalaryServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SalarySlipResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SalarySlipResponse(SalarySlipResponse other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      payPeriod_ = other.payPeriod_;
      grossIncome_ = other.grossIncome_;
      incomeTax_ = other.incomeTax_;
      netIncome_ = other.netIncome_;
      super_ = other.super_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SalarySlipResponse Clone() {
      return new SalarySlipResponse(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PayPeriod" field.</summary>
    public const int PayPeriodFieldNumber = 3;
    private string payPeriod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayPeriod {
      get { return payPeriod_; }
      set {
        payPeriod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GrossIncome" field.</summary>
    public const int GrossIncomeFieldNumber = 4;
    private double grossIncome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GrossIncome {
      get { return grossIncome_; }
      set {
        grossIncome_ = value;
      }
    }

    /// <summary>Field number for the "IncomeTax" field.</summary>
    public const int IncomeTaxFieldNumber = 5;
    private double incomeTax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IncomeTax {
      get { return incomeTax_; }
      set {
        incomeTax_ = value;
      }
    }

    /// <summary>Field number for the "NetIncome" field.</summary>
    public const int NetIncomeFieldNumber = 6;
    private double netIncome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NetIncome {
      get { return netIncome_; }
      set {
        netIncome_ = value;
      }
    }

    /// <summary>Field number for the "Super" field.</summary>
    public const int SuperFieldNumber = 7;
    private double super_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Super {
      get { return super_; }
      set {
        super_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SalarySlipResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SalarySlipResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (PayPeriod != other.PayPeriod) return false;
      if (GrossIncome != other.GrossIncome) return false;
      if (IncomeTax != other.IncomeTax) return false;
      if (NetIncome != other.NetIncome) return false;
      if (Super != other.Super) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PayPeriod.Length != 0) hash ^= PayPeriod.GetHashCode();
      if (GrossIncome != 0D) hash ^= GrossIncome.GetHashCode();
      if (IncomeTax != 0D) hash ^= IncomeTax.GetHashCode();
      if (NetIncome != 0D) hash ^= NetIncome.GetHashCode();
      if (Super != 0D) hash ^= Super.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PayPeriod.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PayPeriod);
      }
      if (GrossIncome != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GrossIncome);
      }
      if (IncomeTax != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(IncomeTax);
      }
      if (NetIncome != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(NetIncome);
      }
      if (Super != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Super);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PayPeriod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayPeriod);
      }
      if (GrossIncome != 0D) {
        size += 1 + 8;
      }
      if (IncomeTax != 0D) {
        size += 1 + 8;
      }
      if (NetIncome != 0D) {
        size += 1 + 8;
      }
      if (Super != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SalarySlipResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PayPeriod.Length != 0) {
        PayPeriod = other.PayPeriod;
      }
      if (other.GrossIncome != 0D) {
        GrossIncome = other.GrossIncome;
      }
      if (other.IncomeTax != 0D) {
        IncomeTax = other.IncomeTax;
      }
      if (other.NetIncome != 0D) {
        NetIncome = other.NetIncome;
      }
      if (other.Super != 0D) {
        Super = other.Super;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            PayPeriod = input.ReadString();
            break;
          }
          case 33: {
            GrossIncome = input.ReadDouble();
            break;
          }
          case 41: {
            IncomeTax = input.ReadDouble();
            break;
          }
          case 49: {
            NetIncome = input.ReadDouble();
            break;
          }
          case 57: {
            Super = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
